import time
import asyncio

from aiosmtplib import send
from email.mime.text import MIMEText
from aiogram.types import CallbackQuery, Message
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from settings import config, EDIT_MSG_DELAY
from keyboard.mkp_cancel import mkp_cancel
from external.messages import send_to_group
from bot_create import bot
from modules.randomize_msg import generate_variations


class Startwork(StatesGroup):
    credentials = State()
    theme = State()
    text = State()
    recipients = State()


router_cb_start = Router()

@router_cb_start.callback_query(F.data.startswith('start.'))
async def start_working(call: CallbackQuery, state: FSMContext):
    if call.data == 'start.work':
        await call.message.edit_text(text='<b>üìù –í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç –∞–∫–∫–∞—É–Ω—Ç–æ–≤:</b>',
                                     parse_mode='html', reply_markup=mkp_cancel)
        await state.set_state(Startwork.credentials)


@router_cb_start.message(Startwork.credentials)
async def input_credentials(msg: Message, state: FSMContext):
    await state.update_data(credentials=msg.text.split('\n'))
    await msg.answer('<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–∞—Å—Å—ã–ª–∫–∏: </b>', parse_mode='html')
    await state.set_state(Startwork.theme)


@router_cb_start.message(Startwork.theme)
async def input_theme(msg: Message, state: FSMContext):
    await state.update_data(theme=msg.text)
    await msg.answer('<b>üìù –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏(–º–æ–∂–Ω–æ —Å html —Ç–µ–≥–∞–º–∏)</b>',
                     parse_mode='html')
    await state.set_state(Startwork.text)
    
    
@router_cb_start.message(Startwork.text)
async def input_text(msg: Message, state: FSMContext):
    await state.update_data(text=msg.text)
    await msg.answer('<b>üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π (–º–æ–∂–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ txt)</b>',
                     parse_mode='html')
    await state.set_state(Startwork.recipients)
    

@router_cb_start.message(Startwork.recipients)
async def input_recipients(msg: Message, state: FSMContext):
    recipients = msg.text
    if msg.document:
        file_id = msg.document.file_id
        file = await bot.get_file(file_id)
        content = await bot.download_file(file.file_path)
        content_str = content.read().decode('utf-8')
        recipients = content_str.strip()
    recipients_list = recipients.strip().split('\n')
    data = await state.get_data()
    count_accs = len(data['credentials'])
    COUNT_MSG = config.get_count_messages()
    if count_accs * COUNT_MSG > len(recipients_list):
        await msg.reply(f'<b>‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —Ä–∞–≤–Ω–æ –∏–ª–∏ –±–æ–ª—å—à–µ: {count_accs * COUNT_MSG}</b>',
                        parse_mode='html')
        return
    await state.clear()
    await send_to_emails(msg, data, recipients_list)


async def send_to_emails(msg, data: dict, recipients: list):
    count_recipients = len(recipients)
    count = 0
    last_edit_time = 0
    COUNT_MSG = config.get_count_messages()
    config.count_errors = 0
    
    count_sent = 0
    count_need_sent = config.get_count_messages()
    
    accounts = data['credentials']
    theme = data['theme']
    text = data['text']
    
    delay = config.get_delay()
    message_count = await msg.answer(f'<b>‚åõÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{count}/{count_recipients}]</b>',
                    parse_mode='html')
    smtp_settings = {
        'hostname': 'smtp.gmail.com',
        'port': 587
    }
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á
    tasks = []
    generation = config.get_generation()
    for acc in accounts:
        config.update_error(False)
        user = acc.split(':')[0]
        password = acc.split(':')[1]
        smtp_settings['user'] = user
        smtp_settings['password'] = password
        for recipient in recipients[count_sent:count_need_sent]:
            if config.get_status_error():
                break
            count += 1
            current_time = time.time()
            if generation:
                generate_theme = await generate_variations(theme)
                generate_text = await generate_variations(text)
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
            if current_time - last_edit_time >= EDIT_MSG_DELAY:
                await message_count.edit_text(
                    f'<b>‚åõÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É!'
                    f'\n‚åõÔ∏è –ó–∞–¥–µ—Ä–∂–∫–∞: {delay} —Å–µ–∫'
                    f'\nü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è: {"–≤–∫–ª—é—á–µ–Ω–∞" if generation else "–≤—ã–∫–ª—é—á–µ–Ω–∞"}'
                    f'\n‚úâÔ∏è –ö–æ–ª-–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ 1 –∞–∫–∫–∞—É–Ω—Ç: {COUNT_MSG}'
                    f'\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: [{count}/{count_recipients}]'
                    f'\nüö´ –û—à–∏–±–æ–∫ –≤–æ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {config.get_count_errors()}'
                    f'\n‚û°Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ –∏–¥—ë—Ç —Å –∞–∫–∫–∞—É–Ω—Ç–∞: {user}</b>',
                    parse_mode='html')
                last_edit_time = current_time
            if generation:
                task = asyncio.create_task(send_email(generate_theme, generate_text, recipient, smtp_settings))
            else:
                task = asyncio.create_task(send_email(theme, text, recipient, smtp_settings))
            tasks.append(task)
            tasks.append(asyncio.create_task(handle_task(task, acc, msg.from_user.username)))
            await asyncio.sleep(delay)
        count_sent = count
        count_need_sent *= 2

    await msg.answer('<b>‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>', parse_mode='html')
    await send_to_group(f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{msg.from_user.username} —Ä–∞–∑–æ—Å–ª–∞–ª {count} –ø–∏—Å–µ–º</b>')


async def handle_task(task, account, user):
    try:
        await task
    except Exception as e:
        config.update_error(True)
        config.count_errors += 1
        await send_to_group(f'<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞ —Å –∞–∫–∫–∞—É–Ω—Ç–∞ {account}: {e}\n–í–æ–∑–Ω–∏–∫–ª–∞ —É @{user}</b>')

async def send_email(subject, html_body, recipient, smtp_settings):
    message = MIMEText(html_body, 'html')  
    message['Subject'] = subject
    message['From'] = smtp_settings['user']
    message['To'] = recipient
    await send(
        message,
        hostname=smtp_settings['hostname'],
        port=smtp_settings['port'],
        username=smtp_settings['user'],
        password=smtp_settings['password'],
        use_tls=False
    )